"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ElasticBuffer = void 0;
const INITIAL_SIZE = 4096;
class ElasticBuffer {
    constructor() {
        this.offset = 0;
        this.size = INITIAL_SIZE;
    }
    clear() {
        this.offset = 0;
    }
    get empty() {
        return this.offset === 0;
    }
    reserve(size) {
        var _a;
        let length = ((_a = this.buffer) === null || _a === void 0 ? void 0 : _a.length) || 0;
        const offset = this.offset;
        const available = length - offset;
        if (available < size || !this.buffer) {
            while (available + length < size)
                length = Math.max(this.size, length << 1);
            const buffer = Buffer.allocUnsafe(length << 1);
            if (this.buffer) {
                this.buffer.copy(buffer, 0, 0, offset);
            }
            this.buffer = buffer;
            return buffer;
        }
        return this.buffer;
    }
    getBuffer(size) {
        const offset = this.offset;
        const buffer = this.reserve(size);
        this.offset += size;
        return buffer.subarray(offset, offset + size);
    }
    consume() {
        var _a;
        const buffer = (_a = this.buffer) === null || _a === void 0 ? void 0 : _a.subarray(0, this.offset);
        if (buffer) {
            this.size = Math.max(this.offset, INITIAL_SIZE) >> 1;
        }
        this.offset = 0;
        this.buffer = undefined;
        return buffer;
    }
    offer(buffer) {
        if (!this.buffer) {
            this.buffer = buffer;
        }
    }
}
exports.ElasticBuffer = ElasticBuffer;
//# sourceMappingURL=buffer.js.map