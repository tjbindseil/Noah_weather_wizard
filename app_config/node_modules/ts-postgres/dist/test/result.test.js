"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
Object.defineProperty(exports, "__esModule", { value: true });
const globals_1 = require("@jest/globals");
const helper_1 = require("./helper");
function testIteratorResult(client, f) {
    var _a, e_1, _b, _c, _d, e_2, _e, _f;
    return __awaiter(this, void 0, void 0, function* () {
        const query = () => client.query('select generate_series($1::int, $2::int) as i', [0, 9]);
        const iterator = query();
        const items = yield f(iterator);
        //const result = await iterator;
        (0, globals_1.expect)(items.length).toEqual(10);
        (0, globals_1.expect)(items).toEqual([...Array(10).keys()].map(i => ({ i: i })));
        const result = yield iterator;
        (0, globals_1.expect)(result.names).toEqual(['i']);
        let count = 0;
        try {
            /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
            for (var _g = true, iterator_1 = __asyncValues(iterator), iterator_1_1; iterator_1_1 = yield iterator_1.next(), _a = iterator_1_1.done, !_a;) {
                _c = iterator_1_1.value;
                _g = false;
                try {
                    const _ = _c;
                    count += 1;
                }
                finally {
                    _g = true;
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (!_g && !_a && (_b = iterator_1.return)) yield _b.call(iterator_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        (0, globals_1.expect)(count).toEqual(10);
        try {
            // We could iterate multiple times over the same result.
            /* eslint-disable-next-line @typescript-eslint/no-unused-vars */
            for (var _h = true, iterator_2 = __asyncValues(iterator), iterator_2_1; iterator_2_1 = yield iterator_2.next(), _d = iterator_2_1.done, !_d;) {
                _f = iterator_2_1.value;
                _h = false;
                try {
                    const _ = _f;
                    count += 1;
                }
                finally {
                    _h = true;
                }
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (!_h && !_d && (_e = iterator_2.return)) yield _e.call(iterator_2);
            }
            finally { if (e_2) throw e_2.error; }
        }
        (0, globals_1.expect)(count).toEqual(20);
    });
}
(0, globals_1.describe)('Result', () => {
    (0, helper_1.testWithClient)('Default type', (client) => __awaiter(void 0, void 0, void 0, function* () {
        globals_1.expect.assertions(7);
        const result = yield client.query('select $1::text as message', ['Hello world!']);
        (0, globals_1.expect)(result.status).toEqual('SELECT 1');
        (0, globals_1.expect)(result.names.length).toEqual(1);
        (0, globals_1.expect)(result.names[0]).toEqual('message');
        (0, globals_1.expect)([...result]).toEqual([{ message: 'Hello world!' }]);
        const rows = [...result];
        const row = rows[0];
        (0, globals_1.expect)(row.message).toEqual('Hello world!');
        (0, globals_1.expect)(row.bad).toEqual(undefined);
        const mapped = result.rows[0].reify();
        (0, globals_1.expect)(mapped.message).toEqual('Hello world!');
    }));
    (0, helper_1.testWithClient)('Typed', (client) => __awaiter(void 0, void 0, void 0, function* () {
        globals_1.expect.assertions(3);
        const result = yield client.query('select $1::text as message', ['Hello world!']);
        (0, globals_1.expect)(result.status).toEqual('SELECT 1');
        const rows = [...result];
        const row = result.rows[0];
        const obj = rows[0];
        (0, globals_1.expect)(row.get('message')).toEqual('Hello world!');
        (0, globals_1.expect)(obj.message).toEqual('Hello world!');
    }));
    (0, helper_1.testWithClient)('Parse array containing null', (client) => __awaiter(void 0, void 0, void 0, function* () {
        globals_1.expect.assertions(1);
        const row = yield client.query('select ARRAY[null::text] as a').one();
        (0, globals_1.expect)(row.a).toEqual([null]);
    }));
    (0, helper_1.testWithClient)('Format array containing null value', (client) => __awaiter(void 0, void 0, void 0, function* () {
        globals_1.expect.assertions(1);
        const row = yield client.query('select $1::text[] as a', [[null]]).one();
        (0, globals_1.expect)(row.a).toEqual([null]);
    }));
    (0, helper_1.testWithClient)('Format null-array', (client) => __awaiter(void 0, void 0, void 0, function* () {
        globals_1.expect.assertions(1);
        const row = yield client.query('select $1::text[] as a', [null]).one();
        (0, globals_1.expect)(row.a).toEqual(null);
    }));
    (0, helper_1.testWithClient)('One', (client) => __awaiter(void 0, void 0, void 0, function* () {
        globals_1.expect.assertions(1);
        const row = yield client.query('select $1::text as message', ['Hello world!']).one();
        (0, globals_1.expect)(row.message).toEqual('Hello world!');
    }));
    (0, helper_1.testWithClient)('One (empty query)', (client) => __awaiter(void 0, void 0, void 0, function* () {
        globals_1.expect.assertions(1);
        yield (0, globals_1.expect)(client.query('select true where false').one())
            .rejects.toThrow(/empty/);
    }));
    (0, helper_1.testWithClient)('First (error)', (client) => __awaiter(void 0, void 0, void 0, function* () {
        const query = client.query('select does-not-exist');
        return (0, globals_1.expect)(query.first()).rejects.toMatchObject({
            message: 'column "does" does not exist'
        });
    }));
    (0, helper_1.testWithClient)('One (error)', (client) => __awaiter(void 0, void 0, void 0, function* () {
        const query = client.query('select does-not-exist');
        return (0, globals_1.expect)(query.one()).rejects.toMatchObject({
            message: 'column "does" does not exist'
        });
    }));
    (0, helper_1.testWithClient)('Multiple null params', (client) => __awaiter(void 0, void 0, void 0, function* () {
        globals_1.expect.assertions(3);
        const row = yield client.query('select $1::text as a, $2::text[] as b, $3::jsonb[] as c', [null, null, null]).one();
        (0, globals_1.expect)(row.a).toBeNull();
        (0, globals_1.expect)(row.b).toBeNull();
        (0, globals_1.expect)(row.c).toBeNull();
    }));
    (0, helper_1.testWithClient)('Synchronous iteration', (client) => __awaiter(void 0, void 0, void 0, function* () {
        yield testIteratorResult(client, (p) => __awaiter(void 0, void 0, void 0, function* () {
            return p.then((result) => {
                const rows = [];
                for (const row of result) {
                    rows.push(row);
                }
                return rows;
            });
        }));
    }));
    (0, helper_1.testWithClient)('Asynchronous iteration', (client) => __awaiter(void 0, void 0, void 0, function* () {
        yield testIteratorResult(client, (result) => { var _a, result_1, result_1_1; return __awaiter(void 0, void 0, void 0, function* () {
            var _b, e_3, _c, _d;
            const rows = [];
            try {
                for (_a = true, result_1 = __asyncValues(result); result_1_1 = yield result_1.next(), _b = result_1_1.done, !_b;) {
                    _d = result_1_1.value;
                    _a = false;
                    try {
                        const row = _d;
                        rows.push(row);
                    }
                    finally {
                        _a = true;
                    }
                }
            }
            catch (e_3_1) { e_3 = { error: e_3_1 }; }
            finally {
                try {
                    if (!_a && !_b && (_c = result_1.return)) yield _c.call(result_1);
                }
                finally { if (e_3) throw e_3.error; }
            }
            return rows;
        }); });
    }));
    (0, helper_1.testWithClient)('Null typed array', (client) => __awaiter(void 0, void 0, void 0, function* () {
        globals_1.expect.assertions(1);
        const row = yield client.query('select null::text[] as value').one();
        (0, globals_1.expect)(row.value).toBeNull();
    }));
});
//# sourceMappingURL=result.test.js.map